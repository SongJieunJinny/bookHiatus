<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 제외 url pattern -->
	<security:http pattern="/resources/**" security="none" />
	<security:http auto-config="true" use-expressions="true" create-session="ifRequired">
	
		<security:intercept-url pattern="/**" requires-channel="https"/>
		<!-- permitAll태그는 모든 사용자에게 허용 -->
		<security:intercept-url pattern="/" access="permitAll"/>	
		<security:intercept-url pattern="/guest/guestOrder.do" access="permitAll"/>
		<!-- 게스트 주문 생성은 POST만 허용 -->
		<security:intercept-url pattern="/order/guest/create" method="POST" access="permitAll"/>
		<!-- 게스트 주문 조회(번호+이메일로 조회) POST만 허용 -->
		<security:intercept-url pattern="/guest/guestOrderInfo.do" method="POST" access="permitAll"/>
		<!-- 게스트 주문 상세 페이지(조회 후 이동) -->
		<security:intercept-url pattern="/guest/guestOrderDetailsView.do" access="permitAll"/>	
				
		<security:intercept-url pattern="/order/**" access="isAuthenticated()"/>

		<!-- hasAnyRole 제시된 권한 중 하나라도 가지고 있으면 true 하나만 가지고 있으면 false -->
		<security:intercept-url pattern="/user/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_USER_KAKAO')"/>
	    <security:intercept-url pattern="/mypage/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_USER_KAKAO')"  />
		<!-- hasRole 로그인한 사용자가 제시한 권한이 있으면 true, 없으면 false -->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>

		<security:form-login login-page="/login.do"
							 login-processing-url="/loginOk.do"
							 authentication-success-handler-ref="userLoginSuccessHandler"
							 authentication-failure-handler-ref="userLoginFailureHandler"
							 username-parameter="USER_ID" password-parameter="USER_PW"/>
	
		<!-- 로그아웃 설정 -->
		<security:logout logout-url="/logout.do" 
						 logout-success-url="/" 
						 invalidate-session="true"
						 delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"/>
						 
						 
		<!-- 로그인은 했으나 경로 접근 권한 없을시 호출 객체 설정 -->
		<security:access-denied-handler ref="userDeniedHandler"/>
		

	    <!-- ===== CSRF 보호 ===== -->
	    <!-- 기본 값이면 로그인/POST/PUT/DELETE 요청에 CSRF 토큰 필요 -->
		<security:csrf/>

	    <!-- ===== 세션 보안 ===== -->
	     <security:session-management session-fixation-protection="migrateSession" invalid-session-url="/login.do?expired">
	      	<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
	     </security:session-management>

	    <!-- ===== 보안 헤더 ===== -->
	    <security:headers>
	      <!-- 동일 출처 프레임만 허용 -->
	      <security:frame-options policy="SAMEORIGIN"/>
	      <!-- MIME 스니핑 방지 -->
	      <security:content-type-options/>
	      <!-- 기본 XSS 필터(구형 브라우저용) -->
	      <security:xss-protection block="true"/>
	      <!-- HSTS: HTTPS 고정(1년) + 서브도메인 포함 -->
	      <security:hsts include-subdomains="true" max-age-seconds="31536000"/>
	      <!-- (선택) CSP: 리소스 로딩 출처를 엄격히 제한하고 싶을 때 활성화
	      <security:content-security-policy policy-directives="
	          default-src 'self';
	          img-src 'self' data:;
	          script-src 'self';
	          style-src 'self' 'unsafe-inline';
	          object-src 'none'"/>
	      -->
	      <!-- (선택) 캐시 제어: 민감 페이지 캐시 금지
	      <security:cache-control/>
	      -->
	    </security:headers>

		
	</security:http>
	
	<bean id="userLoginSuccessHandler" class="com.bookGap.service.UserLoginSuccessHandler" />
	<bean id="userLoginFailureHandler" class="com.bookGap.service.UserLoginFailureHandler" />
	<bean id="userDeniedHandler" class="com.bookGap.service.UserDeniedHandler" />
	<bean id="userService" class="com.bookGap.service.UserAuthenticationService">
		<constructor-arg name="sqlSession" ref="sqlSession" />
	</bean>
	
	<!-- 비밀번호 비교할 암호화 객체 선언 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<!-- 
	로그인버튼 클릭시 security에서 어떤 userAuthenticationService를 
	사용할 지와  반환된 User객체에서 어떤 비밀번호 암호화를 사용하여 비교 할 것인지에 대한 정보를 설정 영역 
	-->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="userService"><!-- userVO 반환 객체 참조 -->
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
	
	<security:global-method-security  pre-post-annotations="enabled"   secured-annotations="enabled"   jsr250-annotations="enabled"/>
		
</beans>